# -*- python -*-
# $Header: /nfs/slac/g/glast/ground/cvs/ScienceTools-scons/setupTarget.scons,v 1.3 2009/07/27 17:06:35 glastrm Exp $
# setupTarget.scons defines a target to make a setup file (_setup.sh) which
# will define environment variables needed to use SCons-generated executables
# or, for Windows, a file _setup.vbs, which, when run locally by end-user,
# will write _setup.bat, to be used at the command line or to set up for
# invoking Visual Studio

import os,platform,SCons
Import('baseEnv')

# Make a builder for set-up files (_setup on Linux; _setup.bat on Windows)
# Set-up files don't depend on "normal" sources; they depend on the
# externals, the generateScript.py tool and on the collection of
# SConscripts in the container because these also modify the environment

setupScript = baseEnv.GenerateSetupScript(target=[os.path.join(str(baseEnv['SCRIPTDIR']),'_setup')],
                                          source=[File('./externals.scons')])

baseEnv.Default(setupScript)
baseEnv.Alias('all', setupScript)
baseEnv.Alias('setup', setupScript)


if baseEnv['PLATFORM'] == 'win32':
  # Make the builder for the non-portable _setup.bat
   vbssrc = os.path.join(str(baseEnv['SCRIPTDIR']), '_setup.vbs')
   abspath = os.path.abspath(os.path.dirname(vbssrc))
   GenerateLocalSetupBuilder = baseEnv.Builder(action='_setup.vbs',
                                               suffix="bat",
                                               chdir=abspath)
   baseEnv['BUILDERS']['LocalSetup'] = GenerateLocalSetupBuilder

   # get ready to use it
   setupEnv = baseEnv.Clone()
   instdir = os.path.abspath(os.path.join(str(baseEnv['SCRIPTDIR']),'..','..'))
   setupEnv['ENV']['INST_DIR'] = instdir
   setupEnv['ENV']['PFILES'] = os.getenv('PFILES','')
   setupEnv['ENV']['PYTHONPATH'] = os.getenv('PYTHONPATH','')
   setupEnv['ENV']['PATH'] = os.getenv('PATH')

   setupEnv['ENV']['HOMEPATH'] = os.getenv('HOMEPATH')
   setupEnv['ENV']['HOMEDRIVE'] = os.getenv('HOMEDRIVE')

   if baseEnv.GetOption('GLAST-EXT'):
       glastextEnv = ''
       glastextEnv = baseEnv.GetOption('GLAST-EXT')
       if glastextEnv != '':
           setupEnv['ENV']['GLAST_EXT'] = glastextEnv

   t=os.path.join(str(baseEnv['SCRIPTDIR']), '_setup')
   localSetup = setupEnv.LocalSetup(target = [t], source=[setupScriptInst])

   baseEnv.Alias('setup', localSetup)
